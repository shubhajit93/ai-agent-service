name: CI Pipeline
permissions:
  contents: write
  packages: write

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-core:
    name: Build and Test Core Module
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Java Environment
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Cache Maven Dependencies
      - name: Cache Maven Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Install Parent POM
      - name: Install Parent POM
        run: |
          mvn install -f pom.xml

      # Build and Install Core Module
      - name: Build and Install Core
        run: |
          cd agent.core
          mvn clean install

      - name: List Maven Repository
        run: |
          echo "Contents of ~/.m2/repository:"
          ls -R ~/.m2/repository/org/hishab/agent/core

  build-services:
    name: Build and Test Dependent Services
    needs: build-core
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - agent.cmd.api
          - agent.query.api
    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Java Environment
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # Restore Maven Cache
      - name: Restore Maven Cache
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Debug Maven Repository
      - name: List Restored Maven Repository
        run: |
          echo "Contents of restored ~/.m2/repository:"
          ls -R ~/.m2/repository/org/hishab/agent/core

      # Build and Test Dependent Services
      - name: Build and Test ${{ matrix.service }}
        run: |
          cd ${{ matrix.service }}
          mvn clean test

      # Upload Test Results
      - name: Upload Test Results for ${{ matrix.service }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-test-results
          path: ${{ matrix.service }}/target/surefire-reports/

  docker-build-and-push:
    name: Build and Push Docker Images
    needs: build-services
    runs-on: ubuntu-latest
    steps:
      # Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3
          

#      - name: Prepare Version Info
#        run: |
#          APP_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
#          echo "VERSION=$APP_VERSION" >> $GITHUB_ENV
#          echo "Command Service Image Tag: ghcr.io/${{ github.repository_owner }}/agent.cmd.api:$APP_VERSION"
#          echo "Query Service Image Tag: ghcr.io/${{ github.repository_owner }}/agent.query.api:$APP_VERSION"

      # Log in to github Registry
      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      # Build and Push Docker Images
      - name: Build and Push Docker Images for Services
        run: |
          APP_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Building and pushing Docker images for services with version $APP_VERSION"
          for service in agent.cmd.api agent.query.api
          do
            IMAGE_TAG=ghcr.io/${{ github.repository_owner }}/$service:$APP_VERSION
            echo "Building and pushing Docker image for $service with tag $IMAGE_TAG"
            docker build -t $IMAGE_TAG -f $service/Dockerfile .
            echo "Pushing Docker image for $service with tag $IMAGE_TAG"
            docker push $IMAGE_TAG
          done
